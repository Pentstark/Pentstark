name: Build & Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2️⃣ Setup Node.js on runner (for build only)
    - name: Setup Node.js (for build)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    # 3️⃣ Clean npm cache
    - name: Clean npm cache
      run: npm cache clean --force

    # 4️⃣ Install dependencies for build
    - name: Install dependencies
      run: npm ci

    # 5️⃣ Build project
    - name: Build project
      run: npm run build

    # 6️⃣ Verify dist folder exists
    - name: Check dist folder
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ Build failed: dist folder not found!"
          exit 1
        fi

    # 7️⃣ Setup SSH agent
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}
    # 8️⃣ Deploy everything to Hostinger with reset
    - name: Deploy to Hostinger (reset & redeploy)
      env:
        BASE_PATH: /home/u452452192/domains/safeproduction.pentstark.com
        PUBLIC_PATH: /home/u452452192/domains/safeproduction.pentstark.com/public_html
        MAIN_PATH: /home/u452452192/domains/safeproduction.pentstark.com/main
      run: |
        echo "📦 Creating repo zip (excluding dist)..."
        zip -r repo.zip . -x "dist/*" ".git/*" "node_modules/*"

        echo "🚀 Uploading repo zip..."
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 65002 repo.zip \
          u452452192@147.93.109.200:$BASE_PATH/

        echo "🚀 Creating dist_temp on remote..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 65002 \
          u452452192@147.93.109.200 "mkdir -p $BASE_PATH/dist_temp"

        echo "🚀 Uploading dist files..."
        rsync -avz --checksum --progress \
          -e "ssh -p 65002 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
          dist/ u452452192@147.93.109.200:$BASE_PATH/dist_temp/

        echo "🚀 Setting up remote structure..."
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 65002 \
          u452452192@147.93.109.200 "
            set -e

            echo '🧹 Cleaning base path...'
            rm -rf $BASE_PATH/*

            echo '📂 Creating fresh structure...'
            mkdir -p $PUBLIC_PATH
            mkdir -p $MAIN_PATH

            echo '📦 Moving dist files to public_html...'
            mv $BASE_PATH/dist_temp/* $PUBLIC_PATH/ || echo '⚠️ No dist files found to move'

            rm -rf $BASE_PATH/dist_temp

            echo '📦 Extracting repo into main...'
            cd $MAIN_PATH
            mv $BASE_PATH/repo.zip .
            unzip -o repo.zip
            rm repo.zip

            # Node.js install if missing
            if [ ! -d \"\$HOME/node\" ]; then
              echo '⬇️ Downloading Node.js...'
              cd ~
              wget https://nodejs.org/dist/v18.20.1/node-v18.20.1-linux-x64.tar.gz -O node.tar.gz
              tar -xzf node.tar.gz
              mv node-v18.20.1-linux-x64 node
              rm node.tar.gz
            fi

            export PATH=\$HOME/node/bin:\$PATH
            node -v
            npm -v

            # Install dependencies
            cd $MAIN_PATH
            npm install

            # Env file
            echo 'VITE_CLERK_PUBLISHABLE_KEY=pk_live_Y2xlcmsucGVudHN0YXJrLmNvbSQ' > .env.production

            echo '✅ Deployment complete!'
          "

    # 9️⃣ Cleanup local build folder and zip to save runner space
    - name: Cleanup local files
      run: rm -rf dist repo.zip

    # 🔟 Final deployment message
    - name: Deployment complete
      run: echo "✅ Deployment finished successfully!"